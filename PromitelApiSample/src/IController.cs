//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PromitelApiSample.src
{
    using PromitelApiSample.src.Models;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// Zmiana hasła konta
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<PasswordResponse> PasswordChangeAuthenticateAsync(PasswordChangeRequest body);

        /// <summary>
        /// Zapomniane hasło (na adres e-mail wysyłany jest link). Link aktywny przez 1 minute, wymagany Token 'AUTHORIZATION'
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<PasswordResponse> PasswordForgotAsync(ForgotPasswordRequest body);

        /// <summary>
        /// Zmiana danych konta tj. E-mail, imię, nazwisko
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<AccountResponse> AccountChangeAuthenticateAsync(AccountRequest body);

        /// <summary>
        /// Zwraca JWTToken - token wymagany do pracy z API
        /// </summary>

        /// <remarks>
        /// Logowanie do Promitel OpenApi
        /// </remarks>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<AuthenticationResponse> AuthenticateAsync(AuthenticationRequest body);

        /// <summary>
        /// Zwraca token wymagany do uwierzytelnienia
        /// </summary>

        /// <remarks>
        /// Token
        /// </remarks>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<AuthorizationResponse> AuthorizeAsync(LoginRequest body);

        /// <summary>
        /// Zwraca produkt o wskazanym ID
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<ProductResponse> ProductByidAuthenticateAsync(int iD);

        /// <summary>
        /// Zwraca produkt o wskazanym indeksie produktu
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<ProductResponse> ProductByproductcodeAuthenticateAsync(string productCode);

        /// <summary>
        /// Zwraca pełną listę produktów wraz z cennikami, stanami, itd...
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<ProductResponseRecordResponse> AllProductsAuthenticateAsync(RecordRequest body);

        /// <summary>
        /// Zwraca produkty z możliwością zastosowania filtrów
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<ProductResponseRecordResponse> ProductFilterAuthenticateAsync(RecordRequestProduct body);

        /// <summary>
        /// Zwraca listę kategorii produktów
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductCategoryResponse>> CategoryAuthenticateAsync();

        /// <summary>
        /// Zwraca listę artykułów (ID) z url do zdjęć
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<PromitelPhotoUrlResponseResponse> ImageUrlAsync(PromitelPhotoUrlRequestRequest body);

        /// <summary>
        /// Zwraca listę produktów z możliwością ustawienia filtrów
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<PromitelProductResponseResponse> PrmitelProductsAuthenticateAsync(PromitelProductRequestRequest body);

        /// <summary>
        /// Zwraca listę magazynów
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelWarehouseResponse>> PrmitelWarehouseAuthenticateAsync();

        /// <summary>
        /// Zwraca listę kategorii
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelCategoryResponse>> PrmitelCategoryAuthenticateAsync();

        /// <summary>
        /// Zwraca listę kategorii wielopoziomowej
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelCategoryTreeResponse>> PrmitelCategoryTreeAuthenticateAsync();

        /// <summary>
        /// Zwraca listę artykułów (ID) z url do zdjęć
        /// </summary>


        /// <returns>Success</returns>

        System.Threading.Tasks.Task<PromitelPhotoUrlResponseResponse> PrmitelPhotoUrlAsync(PromitelPhotoUrlRequestRequest body);

        /// <summary>
        /// Zwraca all-products-test ale wymagane uwierzytelnienie 'special-test-token'
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> AllProductsAuthenticateAllAsync();

        /// <summary>
        /// Zwraca pełną, testową listę produktów wraz z fikcyjnymi danymi tj: nazwy, cenniki, stany, itd... (bez uwierzytelnienia)
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> AllProductsAsync();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Zmiana hasła konta
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/account/password-change")]
        public System.Threading.Tasks.Task<PasswordResponse> PasswordChangeAuthenticate([Microsoft.AspNetCore.Mvc.FromBody] PasswordChangeRequest body)
        {

            return _implementation.PasswordChangeAuthenticateAsync(body);
        }

        /// <summary>
        /// Zapomniane hasło (na adres e-mail wysyłany jest link). Link aktywny przez 1 minute, wymagany Token 'AUTHORIZATION'
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/account/password-forgot")]
        public System.Threading.Tasks.Task<PasswordResponse> PasswordForgot([Microsoft.AspNetCore.Mvc.FromBody] ForgotPasswordRequest body)
        {

            return _implementation.PasswordForgotAsync(body);
        }

        /// <summary>
        /// Zmiana danych konta tj. E-mail, imię, nazwisko
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/account/account-change")]
        public System.Threading.Tasks.Task<AccountResponse> AccountChangeAuthenticate([Microsoft.AspNetCore.Mvc.FromBody] AccountRequest body)
        {

            return _implementation.AccountChangeAuthenticateAsync(body);
        }

        /// <summary>
        /// Zwraca JWTToken - token wymagany do pracy z API
        /// </summary>
        /// <remarks>
        /// Logowanie do Promitel OpenApi
        /// </remarks>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/authentication/authenticate")]
        public System.Threading.Tasks.Task<AuthenticationResponse> Authenticate([Microsoft.AspNetCore.Mvc.FromBody] AuthenticationRequest body)
        {

            return _implementation.AuthenticateAsync(body);
        }

        /// <summary>
        /// Zwraca token wymagany do uwierzytelnienia
        /// </summary>
        /// <remarks>
        /// Token
        /// </remarks>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/authorization/authorization")]
        public System.Threading.Tasks.Task<AuthorizationResponse> Authorize([Microsoft.AspNetCore.Mvc.FromBody] LoginRequest body)
        {

            return _implementation.AuthorizeAsync(body);
        }

        /// <summary>
        /// Zwraca produkt o wskazanym ID
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/product/{ID}")]
        public System.Threading.Tasks.Task<ProductResponse> ProductByidAuthenticate(int iD)
        {

            return _implementation.ProductByidAuthenticateAsync(iD);
        }

        /// <summary>
        /// Zwraca produkt o wskazanym indeksie produktu
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/product/{ProductCode}")]
        public System.Threading.Tasks.Task<ProductResponse> ProductByproductcodeAuthenticate(string productCode)
        {

            return _implementation.ProductByproductcodeAuthenticateAsync(productCode);
        }

        /// <summary>
        /// Zwraca pełną listę produktów wraz z cennikami, stanami, itd...
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/product/all-products")]
        public System.Threading.Tasks.Task<ProductResponseRecordResponse> AllProductsAuthenticate([Microsoft.AspNetCore.Mvc.FromBody] RecordRequest body)
        {

            return _implementation.AllProductsAuthenticateAsync(body);
        }

        /// <summary>
        /// Zwraca produkty z możliwością zastosowania filtrów
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/product/filter")]
        public System.Threading.Tasks.Task<ProductResponseRecordResponse> ProductFilterAuthenticate([Microsoft.AspNetCore.Mvc.FromBody] RecordRequestProduct body)
        {

            return _implementation.ProductFilterAuthenticateAsync(body);
        }

        /// <summary>
        /// Zwraca listę kategorii produktów
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/product/category")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductCategoryResponse>> CategoryAuthenticate()
        {

            return _implementation.CategoryAuthenticateAsync();
        }

        /// <summary>
        /// Zwraca listę artykułów (ID) z url do zdjęć
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/product/image-url")]
        public System.Threading.Tasks.Task<PromitelPhotoUrlResponseResponse> ImageUrl([Microsoft.AspNetCore.Mvc.FromBody] PromitelPhotoUrlRequestRequest body)
        {

            return _implementation.ImageUrlAsync(body);
        }

        /// <summary>
        /// Zwraca listę produktów z możliwością ustawienia filtrów
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/promitel/promitel-products")]
        public System.Threading.Tasks.Task<PromitelProductResponseResponse> PrmitelProductsAuthenticate([Microsoft.AspNetCore.Mvc.FromBody] PromitelProductRequestRequest body)
        {

            return _implementation.PrmitelProductsAuthenticateAsync(body);
        }

        /// <summary>
        /// Zwraca listę magazynów
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/promitel/promitel-warehouse")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelWarehouseResponse>> PrmitelWarehouseAuthenticate()
        {

            return _implementation.PrmitelWarehouseAuthenticateAsync();
        }

        /// <summary>
        /// Zwraca listę kategorii
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/promitel/promitel-category")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelCategoryResponse>> PrmitelCategoryAuthenticate()
        {

            return _implementation.PrmitelCategoryAuthenticateAsync();
        }

        /// <summary>
        /// Zwraca listę kategorii wielopoziomowej
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/promitel/promitel-category-tree")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PromitelCategoryTreeResponse>> PrmitelCategoryTreeAuthenticate()
        {

            return _implementation.PrmitelCategoryTreeAuthenticateAsync();
        }

        /// <summary>
        /// Zwraca listę artykułów (ID) z url do zdjęć
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/promitel/promitel-photo-url")]
        public System.Threading.Tasks.Task<PromitelPhotoUrlResponseResponse> PrmitelPhotoUrl([Microsoft.AspNetCore.Mvc.FromBody] PromitelPhotoUrlRequestRequest body)
        {

            return _implementation.PrmitelPhotoUrlAsync(body);
        }

        /// <summary>
        /// Zwraca all-products-test ale wymagane uwierzytelnienie 'special-test-token'
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/test/all-products-authenticate")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> AllProductsAuthenticateAll()
        {

            return _implementation.AllProductsAuthenticateAllAsync();
        }

        /// <summary>
        /// Zwraca pełną, testową listę produktów wraz z fikcyjnymi danymi tj: nazwy, cenniki, stany, itd... (bez uwierzytelnienia)
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/test/all-products")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> AllProducts()
        {

            return _implementation.AllProductsAsync();
        }

    }
}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
